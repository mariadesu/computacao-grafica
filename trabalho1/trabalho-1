#include <GL/glut.h>
#include <bits/stdc++.h>

float PI = 3.14;

void init(void);
void display(void);


void init(void)
{
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glMatrixMode (GL_PROJECTION);
  glLoadIdentity();
  glOrtho (-10, 10, -10, 10, -10, 10);
}

//formas
void triangle(){
    glBegin(GL_POLYGON);
        glVertex3f(-1,-1,0);
        glVertex3f(0,1,0);
        glVertex3f(1,-1,0);
    glEnd();

    glColor3f(0, 0, 0);
    glLineWidth(2);
    glBegin(GL_LINE_LOOP);
        glVertex2f(-1, -1);
        glVertex2f(0, 1);
        glVertex2f(1, -1);
    glEnd();
}

void square(){
    glBegin(GL_POLYGON);
        glVertex3f(-1,-1,0);
        glVertex3f(1,-1,0);
        glVertex3f(1,1,0);
        glVertex3f(-1,1,0);
    glEnd();

    glColor3f(0, 0, 0);
    glLineWidth(2);
    glBegin(GL_LINE_LOOP);
        glVertex2f(-1, -1);
        glVertex2f(1, -1);
        glVertex2f(1, 1);
        glVertex2f(-1, 1);
    glEnd();
}

void circle(double size){
    glBegin(GL_POLYGON);
    for(int d = 0; d < 32; d++){
        double angulo = (2.0*PI/32.0)*d;
        glVertex3f(size*cos(angulo),size*sin(angulo),0);
    }
    glEnd();

    glColor3f(0, 0, 0);
    glLineWidth(2);
    glBegin(GL_LINE_LOOP);
    for(int d = 0; d < 32; d++){
        double angulo = (2.0*PI/32.0)*d;
        glVertex3f(size*cos(angulo),size*sin(angulo),0);
    }
    glEnd();
}

//cenario
void chao(){
    glColor3f(0.5, 0.7, 1);
    glBegin(GL_POLYGON);
        glVertex3f(-10,-10,0);
        glVertex3f(10,-10,0);
        glVertex3f(10,-2,0);
        glVertex3f(-10,-2,0);
    glEnd();
}

void mar(){
    glColor3f(0, 0, 1);
    glBegin(GL_POLYGON);
        glVertex3f(2,-10,0);
        glVertex3f(10,-10,0);
        glVertex3f(10,-2,0);
        glVertex3f(2,-2,0);
    glEnd();
}

void ceu(){
    glColor3f(0.8, 0.9, 1);
    glBegin(GL_POLYGON);
        glVertex3f(-10,-2,0);
        glVertex3f(10,-2,0);
        glVertex3f(10,10,0);
        glVertex3f(-10,10,0);
    glEnd();
}

void iceberg(){
    glColor3f(1, 1, 1);
    glBegin(GL_POLYGON);
        glVertex3f(-10,-2,0);
        glVertex3f(10,-2,0);
        glVertex3f(10,2,0);
        glVertex3f(7,1,0);
        glVertex3f(5,5,0);
        glVertex3f(0,0,0);
        glVertex3f(-6,4,0);
        glVertex3f(-8,1,0);
        glVertex3f(-10,5,0);
    glEnd();
}

//animais
void pinguim(){
    //cabeÃ§a
    glColor3f(0.6, 0.6, 0.9);
    glPushMatrix();
    circle(1);
    glPopMatrix();
    //olho
    glColor3f(0, 0, 0);
    glPushMatrix();
    glTranslatef(-0.2,0.1,0);
    glScalef(0.5,1,1);
    circle(0.3);
    glPopMatrix();
    //bico
    glColor3f(1, 0.5, 0.3);
    glPushMatrix();
    glTranslatef(1,0,0);
    glScalef(0.5,0.5,1);
    glRotatef(45,1,1,1);
    triangle();
    glPopMatrix();

    //corpo
    glColor3f(0.6, 0.6, 0.9);
    glPushMatrix();
    glTranslatef(0,-3,0);
    glScalef(0.5,1,1);
    circle(2);
    glPopMatrix();
    //barriga
    glColor3f(1, 1, 1);
    glPushMatrix();
    glTranslatef(0.5,-3,0);
    glScalef(0.5,1.5,1);
    circle(1);
    glPopMatrix();

    //pes
    glColor3f(1, 0.5, 0.3);
    glPushMatrix();
    glTranslatef(-0.6,-5,0);
    glScalef(0.5,0.5,1);
    triangle();
    glPopMatrix();
    glColor3f(1, 0.5, 0.3);
    glPushMatrix();
    glTranslatef(0.6,-5,0);
    glScalef(0.5,0.5,1);
    triangle();
    glPopMatrix();
}

void pinguimFilho(){
    glPushMatrix();
    glScalef(0.5,0.5,1);
    pinguim();
    glPopMatrix();
}

void pinguimPai(){
    pinguim();
}


void peixe(){}


void passaro(){}


void display() {
  glClear(GL_COLOR_BUFFER_BIT);

  //cenario
  chao();
  mar();
  ceu();
  iceberg();

  //personagem
  pinguimPai();
  
  glPushMatrix();
  glTranslatef(-2,0,0);
  pinguimFilho();
  glPopMatrix();


  glFlush();
}

void keyboard( unsigned char key, int x, int y )
{
	switch( key ) {
	case 'p' : case 'P' :
		glClearColor(0.0, 0.0, 0.0, 1.0);
	break;

	case 'b' : case 'B' :
		glClearColor(1.0, 1.0, 1.0, 1.0);

	break;
	}
display();
}

void mouse(int button, int action, int x, int y)
{
 switch(button)
 {
   case GLUT_LEFT_BUTTON:
   {

     break;
   }
   case GLUT_MIDDLE_BUTTON:
   {

     break;
   }
   case GLUT_RIGHT_BUTTON:
   {

     break;
   }
   default: break;
 }

 display();
}


int main(int argc, char** argv)
{

  glutInit(&argc, argv);
  glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
  glutInitWindowSize (800, 800);
  glutInitWindowPosition (200, 200);
  glutCreateWindow ("Trabalho 1: Maria Eduarda & Samira");

  init();
  glutDisplayFunc(display);
  glutKeyboardFunc(keyboard);
  glutMouseFunc(mouse);
  glutMainLoop();

  return 0;

}
