#include <GL/glut.h>
#include <bits/stdc++.h>

float PI = 3.14;

//  peixes
float peixeX[4] = {5, 2, 9, 7};  //x dos peixes
float peixeY[4] = {-5.5, -7, -3.5, -8.5}; //y dos peixes
float peixeVelocidade[4] = {0.05, 0.07, 0.04, 0.06};
int direcaoPeixe[4] = {1, 1, -1, 1};  // 1 para direita -1 para esquerda

//  pinguim
float pinguimX = 0.0;
float pinguimY = 0.0;
int direcaoPinguim = 0;

void init(void);
void display(void);
//void timer(int);
void atualizaPeixes(int value);

void init(void)
{
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glOrtho(-13.75, 13.75, -10, 10, -10, 10);

  // timer para animar os peixinhos
  glutTimerFunc(30, atualizaPeixes, 0);
}

//  formas
void triangle(){
    glBegin(GL_POLYGON);
        glVertex3f(-1,-1,0);
        glVertex3f(0,1,0);
        glVertex3f(1,-1,0);
    glEnd();

    glColor3f(0, 0, 0);
    glLineWidth(2);
    glBegin(GL_LINE_LOOP);
        glVertex2f(-1, -1);
        glVertex2f(0, 1);
        glVertex2f(1, -1);
    glEnd();
}

void square(){
    glBegin(GL_POLYGON);
        glVertex3f(-1,-1,0);
        glVertex3f(1,-1,0);
        glVertex3f(1,1,0);
        glVertex3f(-1,1,0);
    glEnd();

    glColor3f(0, 0, 0);
    glLineWidth(2);
    glBegin(GL_LINE_LOOP);
        glVertex2f(-1, -1);
        glVertex2f(1, -1);
        glVertex2f(1, 1);
        glVertex2f(-1, 1);
    glEnd();
}

void circle(double size){
    glBegin(GL_POLYGON);
    for(int d = 0; d < 32; d++){
        double angulo = (2.0*PI/32.0)*d;
        glVertex3f(size*cos(angulo),size*sin(angulo),0);
    }
    glEnd();

    glColor3f(0, 0, 0);
    glLineWidth(2);
    glBegin(GL_LINE_LOOP);
    for(int d = 0; d < 32; d++){
        double angulo = (2.0*PI/32.0)*d;
        glVertex3f(size*cos(angulo),size*sin(angulo),0);
    }
    glEnd();
}

//  cenario
void chao(){
    glColor3f(0.5, 0.7, 1);
    glBegin(GL_POLYGON);
        glVertex3f(-15,-10,0);
        glVertex3f(15,-10,0);
        glVertex3f(15,-2,0);
        glVertex3f(-15,-2,0);
    glEnd();
} 


void mar(){
    glColor3f(0, 0, 1);
    glBegin(GL_POLYGON);
        glVertex3f(0,-10,0);
        glVertex3f(15,-10,0);
        glVertex3f(15,-2,0);
        glVertex3f(0,-2,0);
    glEnd();
}

void ceu(){
    glColor3f(0.8, 0.9, 1);
    glBegin(GL_POLYGON);
        glVertex3f(-15,-2,0);
        glVertex3f(15,-2,0);
        glVertex3f(15,10,0);
        glVertex3f(-15,10,0);
    glEnd();
}

void iceberg(){
    glColor3f(1, 1, 1);
    glBegin(GL_POLYGON);
        glVertex3f(-15,-2,0);
        glVertex3f(15,-2,0);
        glVertex3f(15,2,0);
        glVertex3f(7,1,0);
        glVertex3f(5,5,0);
        glVertex3f(0,0,0);
        glVertex3f(-6,4,0);
        glVertex3f(-8,1,0);
        glVertex3f(-15,5,0);
    glEnd();
}

//  animais
void pinguim(){
    //cabeça
    glColor3f(0.6, 0.6, 0.9);
    glPushMatrix();
    circle(1);
    glPopMatrix();
    //olho
    glColor3f(0, 0, 0);
    glPushMatrix();
    glTranslatef(-0.2,0.1,0);
    glScalef(0.5,1,1);
    circle(0.3);
    glPopMatrix();
    //bico
    glColor3f(1, 0.5, 0.3);
    glPushMatrix();
    glTranslatef(1,0,0);
    glScalef(0.5,0.5,1);
    glRotatef(45,1,1,1);
    triangle();
    glPopMatrix();

    //corpo
    glColor3f(0.6, 0.6, 0.9);
    glPushMatrix();
    glTranslatef(0,-3,0);
    glScalef(0.5,1,1);
    circle(2);
    glPopMatrix();
    //barriga
    glColor3f(1, 1, 1);
    glPushMatrix();
    glTranslatef(0.5,-3,0);
    glScalef(0.5,1.5,1);
    circle(1);
    glPopMatrix();

    //pes
    glColor3f(1, 0.5, 0.3);
    glPushMatrix();
    glTranslatef(-0.6,-5,0);
    glScalef(0.5,0.5,1);
    triangle();
    glPopMatrix();
    glColor3f(1, 0.5, 0.3);
    glPushMatrix();
    glTranslatef(0.6,-5,0);
    glScalef(0.5,0.5,1);
    triangle();
    glPopMatrix();
}

void pinguimFilho(){
    glPushMatrix();
    glScalef(0.3,0.3,1);
    pinguim();
    glPopMatrix();
}

void pinguimPai(){
    glPushMatrix();
    glScalef(0.65, 0.65, 1);
    pinguim();
    glPopMatrix();
}

//peixe
void peixe(int invertido) {
    glPushMatrix();
    glScalef(0.3, 0.3, 1);
    if(invertido) {
        glScalef(-1, 1, 1); 
    }
    
    // corpo 
    glPushMatrix();
    glScalef(1.5, 1.0, 1); // achatadinho
    glColor3f(1.0, 0.6, 0.4);
    circle(1);
    glPopMatrix();
    // cauda
    glColor3f(0.9, 0.4, 0.2);
    glPushMatrix();
    glTranslatef(-2, 0, 0);
    glRotatef(-90, 0, 0, 1);
    glScalef(0.6, 0.6, 1);
    triangle();
    glPopMatrix();
    glPopMatrix();
}

void atualizaPeixes(int value) {
    for(int i = 0; i < 4; i++) {
        peixeX[i] += peixeVelocidade[i] * direcaoPeixe[i];
        
        // verifica se o peixinho saiu da água
        if(peixeX[i] > 9) {
            direcaoPeixe[i] = -1;  // para esquerda
        }
        if(peixeX[i] < 0) {
            direcaoPeixe[i] = 1;    // para direita
        }
    }
    
    glutPostRedisplay();
    glutTimerFunc(30, atualizaPeixes, 0);
}

void passaro(){
    glColor3f(0.0f, 0.0f, 0.0f);  
    glLineWidth(14); 
    glBegin(GL_LINES);
        glVertex2f(-0.5f, 0.0f);
        glVertex2f(0.0f, -0.5f); 
        glVertex2f(0.0f, -0.5f);
        glVertex2f(0.5f, 0.0f);
    glEnd();

    glColor3f(1.0f, 0.6f, 0.6f);
    glLineWidth(10);  
    glBegin(GL_LINES);
        glVertex2f(-0.5f, 0.0f);
        glVertex2f(0.0f, -0.5f); 
        glVertex2f(0.0f, -0.5f);
        glVertex2f(0.5f, 0.0f);
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    //  cenario
    chao();
    mar();
    ceu();
    iceberg();

    //  personagens

    //pinguim filho
    glPushMatrix();
    glTranslatef(-10,-0.5,0);
    pinguimFilho();
    glPopMatrix();

    //pinguim pai
    //impede que o pinguim saia para fora da tela
    if (pinguimX < -13){
        pinguimX = -13;
        pinguimY = 1.5;
    }
    else if (pinguimX > 13){
        pinguimX = 13;
        //pinguimX = 12;
    }
    else if (pinguimX >= -13 && pinguimX <= 0){ //terra
        //pinguim so se move em x em terra
        pinguimY = 1.5;
    }
    else if (pinguimX >= 0 && pinguimX <= 13){ //agua
        if (pinguimY > -1.5){
            pinguimY = -1.5;
        }
        else if (pinguimY < -8.5){
            pinguimY = -8.5;
        }
    }

    glPushMatrix();
    glTranslatef(pinguimX,pinguimY,0);
    if (direcaoPinguim == -1){ //direcao do bico
        glScalef(-1, 1, 1);
    }
    if (pinguimX >= 2 && pinguimX <= 9){
        glRotatef(-90, 0, 0, 1);
    }
    pinguimPai();
    glPopMatrix();

    //peixes
    for(int i = 0; i < 4; i++) {
        glPushMatrix();
        glTranslatef(peixeX[i], peixeY[i], 0);
        peixe(direcaoPeixe[i] == -1);
        glPopMatrix();
    }
    
    //passaro
    glPushMatrix();
    glTranslatef(3.0f, 5.0f, 0.0f);
    glScalef(2.4f, 1.2f, 1.0f); 
    passaro();
    glPopMatrix();

    glFlush();
}

void specialKeys(int key, int x, int y) {
    switch (key) {
        case GLUT_KEY_LEFT:
            direcaoPinguim = -1;
            pinguimX -= 0.5;
            break;
        case GLUT_KEY_RIGHT:
            direcaoPinguim = 1;
            pinguimX += 0.5;
            break;
        case GLUT_KEY_UP:
            pinguimY += 0.5;
            break;
        case GLUT_KEY_DOWN:
            pinguimY -= 0.5;
            break;
    }
    glutPostRedisplay();
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (1100, 800);
    glutInitWindowPosition (200, 0);
    glutCreateWindow ("Trabalho 1: Maria Eduarda & Samira");
  
    init();
    glutDisplayFunc(display);
    glutSpecialFunc(specialKeys);
    glutMainLoop();
  
    return 0;  
}
